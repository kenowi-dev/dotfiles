#!/usr/bin/env bash

###########################
######## VARIABLES ########
###########################


## DIRECTORIES
DOTFILES_BIN="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
DOTFILES_DIR="$( cd "$( dirname "$DOTFILES_BIN" )" >/dev/null 2>&1 && pwd )"
DOTFILES_APPS_DIR="${DOTFILES_DIR}/apps"

## Colors
RED=`tput setaf 1`
GREEN=`tput setaf 2`
YELLOW=`tput setaf 3`
BLUE=`tput setaf 4`
MAGENTA=`tput setaf 5`
CYAN=`tput setaf 6`
RESET=`tput sgr0`

# All supported apps.
SUPPORTED_APPS=()
# The command to be executed. "dotfiles" is the substitution for no command.
DOTFILES_CMD="dotfiles"
# Is the --help option set
DOTFILES_HELP=false
# The option to be executed, if no command is set.
DOTFILES_OPTION="none"
# The option to be executed, if a command is set.
DOTFILES_CMD_OPTION="all"
# Flag, if apps should only be installed
DOTFILES_INSTALL_ONLY=false
# Flag, if only the apps config is relevant
DOTFILES_CONFIG_ONLY=false
# Flag, if all apps should be considered
DOTFILES_INSTALL_ALL=true
# The apps on which the command runs.
DOTFILES_APPS=()
# All positional arguments
POSITIONAL_ARGS=()
# All options.
OPTIONS=()


###########################
######### LOGGING #########
###########################

function process_error() { 
  printf "${RED}ERROR: $1 ${RESET}\n"; 
  echo ""
}
function process_ok () { 
  printf "${GREEN}DONE:${RESET}  $1 ${RESET}\n"; 
  echo ""
}
function process_warn () {
  printf "  ${YELLOW}>>   $1 ${RESET}\n";
}
function process_start() { 
  printf "${BLUE}START:${RESET} $1 ${RESET}\n"; 
}
function process_step() { 
  printf "  ${BLUE}>>${RESET}   $1 ${RESET}\n"; 
}
function process_fail() {
  printf "${RED}FAIL:  $1 Aborting...${RESET}\n"; 
  echo ""
  echo "Use 'dotfiles --help' or 'dotfiles <command> --help' for Usage."
  echo ""
  exit 1
}
function warning() {
  printf "${YELLOW}$1${RESET}\n"
}
function fail() {
  printf "${RED}$1 Aborting...${RESET}\n"
  echo ""
  echo "Use 'dotfiles --help' or 'dotfiles <command> --help' for Usage."
  echo ""
  exit 1
}
function task_start() {
  printf "${RED}$1 Aborting...${RESET}\n"
  echo ""
  echo "Use 'dotfiles --help' or 'dotfiles <command> --help' for Usage."
  echo ""
  exit 1
}

###########################
######### USAGES ##########
###########################


# -v, --verbose option to show output of used commands

function usage_dotfiles() {
  echo ""
  echo "Usage: "
  printf "  ${RESET}dotfiles [${YELLOW}--help${RESET}] [${YELLOW}--path${RESET}] [${YELLOW}--update${RESET}] <${BLUE}command${RESET}> [<${GREEN}args${RESET}>]\n"; 
  echo ""
  printf "  ${RESET}dotfiles ${YELLOW}--help${RESET}\n"; 
  printf "  ${RESET}dotfiles ${YELLOW}--path${RESET}\n"; 
  printf "  ${RESET}dotfiles ${YELLOW}--update${RESET}\n";   
  printf "  ${RESET}dotfiles ${BLUE}configure${RESET} ${GREEN}--help${RESET}\n";  
  printf "  ${RESET}dotfiles ${BLUE}remove${RESET} ${GREEN}--help${RESET}\n";  
  printf "  ${RESET}dotfiles ${BLUE}diff${RESET} ${GREEN}--help${RESET}\n";  
  echo ""
  echo "${YELLOW}Options: ${RESET}"
  echo "  -h, --help        Shows this help message"
  echo "  -u, --update      Updates the repository (does NOT run configure)"
  echo "  -p --path         Show the path to the dotfiles directory"
  echo ""
  echo "${BLUE}Commands: ${RESET}"
  echo "  diff              Show the difference between the installed files and the files in this repository."
  echo "  configure         Installs apps and their config."
  echo "  remove            Removes apps and their config."
  echo ""
}

function usage_configure() {
  echo ""
  echo "Usage: "
  printf "  ${RESET}dotfiles ${BLUE}configure${RESET} [${YELLOW}--help${RESET}] [${YELLOW}--all${RESET}] [${YELLOW}--install-only${RESET}] [${YELLOW}--config-only${RESET}] <${GREEN}app${RESET}>\n"; 
  echo ""
  printf "  ${RESET}dotfiles ${BLUE}configure${RESET} ${YELLOW}--help${RESET}\n"; 
  printf "  ${RESET}dotfiles ${BLUE}configure${RESET} ${YELLOW}--all${RESET} [(${YELLOW}--install-only${RESET}|${YELLOW}--config-only${RESET})]\n"; 
  printf "  ${RESET}dotfiles ${BLUE}configure${RESET} <${GREEN}app${RESET}> [(${YELLOW}--install-only${RESET}|${YELLOW}--config-only${RESET})]\n"; 
  echo ""
  echo "${YELLOW}Options: ${RESET}"
  echo "  --help           Shows this help message"
  echo "  --all            Installs all apps."
  echo "  --install-only   Only installs the app, without configuring it."
  echo "  --config-only    Only configures the app. If the app is not installed, this will do nothing."
  echo ""
  echo ""
  echo "${BLUE}Apps: ${RESET}"
  for i in "${SUPPORTED_APPS[@]}"; do
    printf "  %-16s %s\n" "${i}" "Installs and configures ${i}."
  done 
  echo ""
}

function usage_remove() {
  echo ""
  echo "Usage: "
  printf "  ${RESET}dotfiles ${BLUE}remove${RESET} [${YELLOW}--help${RESET}] [${YELLOW}--all${RESET}] [${YELLOW}--config-only${RESET}] <${GREEN}app${RESET}>\n"; 
  echo ""
  printf "  ${RESET}dotfiles ${BLUE}remove${RESET} ${YELLOW}--help${RESET}\n"; 
  printf "  ${RESET}dotfiles ${BLUE}remove${RESET} ${YELLOW}--all${RESET} [${YELLOW}--config-only${RESET}]\n"; 
  printf "  ${RESET}dotfiles ${BLUE}remove${RESET} <${GREEN}app${RESET}> [${YELLOW}--config-only${RESET}]\n"; 
  echo ""
  echo "${YELLOW}Options: ${RESET}"
  echo "  --help              Shows this help message"
  echo "  --all               Removes all apps."
  echo "  --config-only       Only removes the configuration without removing the app itself."
  echo ""
  echo "${BLUE}Apps: ${RESET}"
  for i in "${SUPPORTED_APPS[@]}"; do
    printf "  %-16s %s\n" "${i}" "Removes ${i} and its configuration."
  done 
  echo ""
}

function usage_diff() {
  echo ""
  echo "Usage: "
  printf "  ${RESET}dotfiles ${BLUE}diff${RESET} [${YELLOW}--help${RESET}] [${YELLOW}--all${RESET}] <${GREEN}app${RESET}>\n"; 
  echo ""
  printf "  ${RESET}dotfiles ${BLUE}diff${RESET} ${YELLOW}--help${RESET}\n"; 
  printf "  ${RESET}dotfiles ${BLUE}diff${RESET} ${YELLOW}--all${RESET}\n"; 
  printf "  ${RESET}dotfiles ${BLUE}diff${RESET} <${GREEN}app${RESET}>\n"; 
  echo ""
  echo "${YELLOW}Options: ${RESET}"
  echo "  --help              Shows this help message"
  echo "  --all               Removes all apps."
  echo ""
  echo ""
  echo "${BLUE}Apps: ${RESET}"
  for i in "${SUPPORTED_APPS[@]}"; do
    printf "  %-16s %s\n" "${i}" "Shows the difference between the installed files this repository"
  done 
  echo ""
}

###########################
######## PARSING ##########
###########################

function parse_positional_args() {

  # Check if valid command is given (no command is valid as well)
  case "X${POSITIONAL_ARGS[0]}" in
    "X");;
    "Xconfigure");;
    "Xremove");;
    "Xdiff");;
    *) fail "Unknown command ${POSITIONAL_ARGS[0]}" ;;
  esac

  # Set the command
  DOTFILES_CMD="${POSITIONAL_ARGS[0]:="dotfiles"}"
  # Remove command from positional args
  DOTFILES_APPS=("${POSITIONAL_ARGS[@]:1}")

  # Check if all given apps are supported
  IS_SUPPORTED=false
  for i in "${DOTFILES_APPS[@]}"; do
    for j in "${SUPPORTED_APPS[@]}"; do
      if [ "${i}" = "${j}" ]; then
        IS_SUPPORTED=true
        break
      fi
    done
    if [ "${IS_SUPPORTED}" = false ]; then
      fail "Unknown app ${i}"
    fi
  done
}

function parse_options() {
  DOTFILES_OPTION=none
  for i in "${OPTIONS[@]}"; do
    case "${i}" in
      "-h" | "--help")    DOTFILES_HELP=true ;;
      "-u" | "--update")  DOTFILES_OPTION=update ;;
      "-p" | "--path")    DOTFILES_OPTION=path ;;
      "--all")            DOTFILES_APPS=("${SUPPORTED_APPS[@]}"); DOTFILES_INSTALL_ALL=true ;;
      "--install-only")   DOTFILES_INSTALL_ONLY=true; DOTFILES_CMD_OPTION="install" ;;
      "--config-only")    DOTFILES_CONFIG_ONLY=true; DOTFILES_CMD_OPTION="config" ;;
      *)                  fail "Unknown argument ${i}" ;;
    esac
  done  
}

function check_option_integrity() {
  if [ "${DOTFILES_HELP}" = true ] && [ ${#OPTIONS[@]} -gt 1 ]; then 
    fail "--help cannot be used with other arguments"
  fi

  if [ "${DOTFILES_OPTION}" != "none" ] && [ ${#OPTIONS[@]} -gt 1 ]; then
    fail "--${DOTFILES_OPTION} cannot be used with other arguments"
  fi
  
  if [ "${DOTFILES_INSTALL_ONLY}" = true ] && [ "${DOTFILES_CONFIG_ONLY}" = true ]; then
    fail "--install-only and --config-only cannot be used together."
  fi

  if [ "${DOTFILES_CMD}" != "dotfiles" ] && [ ${#DOTFILES_APPS[@]} -eq 0 ] && [ ${#OPTIONS[@]} -gt 0 ] && [ "${DOTFILES_HELP}" != true ]; then
    fail "No apps given. Either use --all or set the apps manually."
  fi

  if [ "${DOTFILES_INSTALL_ALL}" = true ] && [ "${DOTFILES_CMD}" = "dotfiles" ]; then
    fail "--all not allowed here."
  fi

  if [ "${DOTFILES_INSTALL_ALL}" = true ] && [ "${#POSITIONAL_ARGS[@]}" -gt 1 ]; then
    fail "Cannot mix manually set apps and --all argument."
  fi

  if [ ${#DOTFILES_APPS[@]} -eq 0 ] && [ ${#OPTIONS[@]} -eq 0 ]; then
    # if no apps and no arguments are give, just output the usage for the command
    usage_${DOTFILES_CMD}
    exit 1
  fi
}


###########################
######## DOTFILES #########
###########################

function dotfiles_update () {
  process_start "Update repository"
  process_step "Pulling repository"
  cd $DOTFILES_DIR && git pull origin main -q  
  if [ $? -eq 0 ]; then    
    process_ok "Updated repository"; 
    echo "To configure any new changes, run 'dotfiles configure --all'"
    echo ""
  else
    process_error "Error updating the repository"
    exit 1
  fi
}

function dotfiles_path() {
  echo "$DOTFILES_DIR"; 
  echo ""
}

function dotfiles_none() {
  usage_dotfiles
  exit 1
}


###########################
###### ENTRY POINT ########
###########################


# Split Positional args from options
while [[ $# -gt 0 ]]; do
  case "${1}" in
    -*|--*) OPTIONS+=("$1") ;;
    *) POSITIONAL_ARGS+=("$1") ;;
  esac
  shift
done

# Fill the SUPPORTED_APPS array, and show warning if an app is not supported.
for i in $(ls -d ${DOTFILES_APPS_DIR}/*/); do 
  APP=$(basename ${i})

  if [ ! -f "${DOTFILES_APPS_DIR}/${APP}/${APP}.sh" ]; then
    warning "Apps folder contains '${APP}', which does not contain a supported script. You wont be able to configre '${APP}'."
  else        
    SUPPORTED_APPS+=("${APP}")
  fi
done

parse_positional_args

parse_options
check_option_integrity

# Output usage if set
if [ "${DOTFILES_HELP}" = true ]; then
  usage_${DOTFILES_CMD}
  exit
fi

# If no command is given, run the given option. 
if [ "${DOTFILES_CMD}" = "dotfiles" ]; then
  dotfiles_${DOTFILES_OPTION}
  exit
fi

# Source all needed apps
for i in "${DOTFILES_APPS[@]}"; do    
  source "${DOTFILES_APPS_DIR}/${i}/${i}.sh" 
done

# Run all need app functions
for i in "${DOTFILES_APPS[@]}"; do 
  printf "${MAGENTA}**** RUNNING TASK: ${i} *****${RESET}\n"
  ${i}_${DOTFILES_CMD}_${DOTFILES_CMD_OPTION}      
done
exit
